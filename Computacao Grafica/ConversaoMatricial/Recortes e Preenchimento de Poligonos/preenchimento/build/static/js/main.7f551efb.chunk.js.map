{"version":3,"sources":["contexts/CanvasContextProvider.tsx","hooks/useCanvasContext.ts","utils/quickSort.ts","PolygonObject/polygon.ts","contexts/PolygonContextProvider.tsx","hooks/usePolygonContext.ts","components/OptionsContainer/index.tsx","sketches/FillPolygonSketch.tsx","components/Canvas/index.tsx","App.tsx","index.tsx"],"names":["CanvasContext","createContext","CanvasContextProvider","props","useState","clearCanvas","setClearCanvas","rightButtonClicked","setRightButtonClicked","Provider","value","children","useCanvasContext","useContext","swap","arr","i","j","temp","quickSort","left","right","partitionIndex","pivot","pivotValue","partition","polygon","borderColor","fillColor","vertices","intersections","Map","isOpen","maxCoordinantes","x","Number","NEGATIVE_INFINITY","y","minCoordinantes","POSITIVE_INFINITY","setColors","p5","newBorderColor","newFillColor","this","fillPolygon","reset","defineMaxsAndMins","xCoordinantes","yCoordinantes","forEach","currentVertice","push","Math","max","min","scanLine","p1","p2","initialY","endY","currentX","deltaX","currentY","get","set","node","length","clear","stroke","currentPoint","k","firstX","endX","point","fill","size","circle","line","PolygonContext","PolygonContextProvider","polygonBorderColor","setPolygonBorderColor","polygonFillColor","setPolygonFillColor","colorsWasChanged","setColorsWasChanged","usePolygonContext","OptionsContainer","className","htmlFor","type","id","onChange","e","target","onClick","FillPolygonSketch","canvas","canvasParentRef","canvasWidth","canvasHeight","redirect","firstVertice","lastVertice","closePolygon","alert","setup","createCanvas","parent","strokeWeight","mouseClicked","trunc","mouseX","mouseY","verticesLength","setVertice","draw","keyPressed","keyCode","Canvas","onContextMenu","preventDefault","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7f551efb.chunk.js","sourcesContent":["import { useState } from \"react\";\nimport { createContext, ReactNode } from \"react\";\n\ntype CanvasContextProviderProps = {\n  children: ReactNode;\n};\n\ninterface CanvasContextType {\n  clearCanvas: boolean;\n  rightButtonClicked: boolean;\n  setRightButtonClicked: (value: boolean) => void;\n  setClearCanvas: (value: boolean) => void;\n}\n\nexport const CanvasContext = createContext({} as CanvasContextType);\n\nexport function CanvasContextProvider(props: CanvasContextProviderProps) {\n  const [clearCanvas, setClearCanvas] = useState(false);\n  const [rightButtonClicked, setRightButtonClicked] = useState(false);\n\n  return (\n    <CanvasContext.Provider\n      value={{\n        clearCanvas,\n        rightButtonClicked,\n        setClearCanvas,\n        setRightButtonClicked,\n      }}\n    >\n      {props.children}\n    </CanvasContext.Provider>\n  );\n}\n\n","import { useContext } from \"react\";\nimport { CanvasContext } from \"../contexts/CanvasContextProvider\";\n\nexport function useCanvasContext() {\n  const value = useContext(CanvasContext); \n  \n  return value;\n}","function swap(arr: number[], i: number, j: number){\n  const temp = arr[i];\n  arr[i] = arr[j];\n  arr[j] = temp;\n}\n\nfunction partition(arr: number[], pivot: number, left: number, right: number){\n  const pivotValue = arr[pivot];\n  let partitionIndex = left;\n\n  for(var i = left; i < right; i++){\n   if(arr[i] < pivotValue){\n     swap(arr, i, partitionIndex);\n     partitionIndex++;\n   }\n }\n swap(arr, right, partitionIndex);\n return partitionIndex;\n}\n\nexport const quickSort = (arr: number[], left: number, right: number) => {\n  let pivot, partitionIndex;\n\n if(left < right){\n   pivot = right;\n   partitionIndex = partition(arr, pivot, left, right);\n   \n  //sort left and right\n  quickSort(arr, left, partitionIndex - 1);\n  quickSort(arr, partitionIndex + 1, right);\n }\n return arr;\n}\n\nexport const yes = \"yes\";","import { quickSort } from \"../utils/quickSort\";\nimport p5Types from \"p5\";\n\ninterface PointType {\n  x: number;\n  y: number;\n}\n\ninterface PolygonType {\n  borderColor: string;\n  fillColor: string;\n  vertices: PointType[];\n  intersections: Map<number, number[]>;\n  isOpen: boolean;\n  maxCoordinantes: PointType;\n  minCoordinantes: PointType;\n  reset: () => void;\n  defineMaxsAndMins: () => void;\n  scanLine: (p1: PointType, p2: PointType) => void;\n  fillPolygon: (p5: p5Types) => void;\n  setColors: (\n    p5: p5Types,\n    newBorderColor: string,\n    newFillColor: string,\n  ) => void;\n}\n\nexport const polygon: PolygonType = {\n  borderColor: \"#000000\",\n  fillColor: \"#000000\",\n  vertices: [],\n  intersections: new Map(),\n  isOpen: true,\n  maxCoordinantes: {\n    x: Number.NEGATIVE_INFINITY,\n    y: Number.NEGATIVE_INFINITY,\n  },\n  minCoordinantes: {\n    x: Number.POSITIVE_INFINITY,\n    y: Number.POSITIVE_INFINITY,\n  },\n\n  setColors(p5: p5Types, newBorderColor: string, newFillColor: string) {\n    this.borderColor = newBorderColor;\n    this.fillColor = newFillColor;\n\n    // re-draw the polygon\n    this.fillPolygon(p5);\n  },\n\n  reset() {\n    this.isOpen = true;\n    this.vertices = [];\n    this.intersections = new Map();\n  },\n\n  defineMaxsAndMins() {\n    let xCoordinantes: number[] = [];\n    let yCoordinantes: number[] = [];\n\n    this.vertices.forEach((currentVertice) => {\n      xCoordinantes.push(currentVertice.x);\n      yCoordinantes.push(currentVertice.y);\n    });\n\n    this.maxCoordinantes.x = Math.max(...xCoordinantes);\n    this.minCoordinantes.x = Math.min(...xCoordinantes);\n    this.maxCoordinantes.y = Math.max(...yCoordinantes);\n    this.minCoordinantes.y = Math.min(...yCoordinantes);\n  },\n\n  // Defines all the X point in a edge\n  scanLine(p1: PointType, p2: PointType) {\n    const intersections = this.intersections;\n    let initialY: number, endY: number;\n    let currentX: number;\n\n    if (p1.y !== p2.y) {\n      const deltaX = (p2.x - p1.x) / (p2.y - p1.y);\n\n      initialY = p1.y;\n      endY = p2.y;\n      currentX = p1.x;\n\n      if (p1.y > p2.y) {\n        [initialY, endY] = [endY, initialY]; // Swap Points\n        currentX = p2.x;\n      }\n\n      for (let currentY = initialY; currentY < endY; currentY++) {\n        if (!intersections.get(currentY)) intersections.set(currentY, [currentX]);\n        else intersections.get(currentY)?.push(currentX);\n        currentX += deltaX;\n      }\n    }\n\n    // Order array with X coordinantes of each Y point (key of the map)\n    intersections.forEach((node) =>\n      quickSort(node, 0, node.length - 1),\n    );\n  },\n\n  fillPolygon(p5: p5Types) {\n    p5.clear();\n    p5.stroke(this.fillColor);\n\n    const initialY = this.minCoordinantes.y;\n    const endY = this.maxCoordinantes.y;\n    const intersections = this.intersections;\n\n    for (let currentY = initialY; currentY < endY; currentY++) {\n      const currentPoint = intersections.get(currentY) || [0];\n      let k = 0;\n\n      do {\n        let firstX = currentPoint[k];\n        let endX = currentPoint[k + 1];\n\n        for (let currentX = firstX; currentX < endX; currentX++)\n          p5.point(currentX, currentY);\n\n        k += 2;\n      } while (currentPoint[k]);\n    }\n\n    p5.stroke(this.borderColor);\n    p5.fill(this.borderColor);\n\n    const size = this.vertices.length;\n\n    for (let i = 1; i <= size; i++) {\n      p5.circle(this.vertices[i % size].x, this.vertices[i % size].y, 2);\n      p5.line(\n        this.vertices[i - 1].x,\n        this.vertices[i - 1].y,\n        this.vertices[i % size].x,\n        this.vertices[i % size].y,\n      );\n    }\n  },\n};\n\n","import { useState } from \"react\";\nimport { createContext, ReactNode } from \"react\";\nimport { polygon } from \"../PolygonObject/polygon\";\nimport p5Types from 'p5';\n\ntype PolygonContextProviderProps = {\n  children: ReactNode;\n}\n\ninterface PointType {\n  x: number,\n  y: number,\n}\n\ninterface PolygonType {\n  borderColor: string;\n  fillColor: string;\n  vertices: PointType[];\n  isOpen: boolean;\n  defineMaxsAndMins: () => void;\n  scanLine: (p1: PointType, p2: PointType) => void;\n  fillPolygon: (p5: p5Types) => void;\n  reset: () => void;\n  setColors: (p5: p5Types, newBorderColor: string, newFillColor: string) => void;\n}\n\n// TODO: Fazer tipagem do polygon\ninterface PolygonContextType {\n  polygonBorderColor: string;\n  polygonFillColor: string;\n  polygon: PolygonType;\n  colorsWasChanged: boolean;\n  setPolygonBorderColor: (value: string) => void;\n  setPolygonFillColor: (value: string) => void;\n  setColorsWasChanged: (value: boolean) => void;\n}\n\nexport const PolygonContext = createContext({} as PolygonContextType);\n\nexport function PolygonContextProvider(props: PolygonContextProviderProps) {\n  const [polygonBorderColor, setPolygonBorderColor] = useState(polygon.borderColor);\n  const [polygonFillColor, setPolygonFillColor] = useState(polygon.fillColor);\n  const [colorsWasChanged, setColorsWasChanged] = useState(false);\n\n  return (\n    <PolygonContext.Provider value={{\n      polygon,\n      polygonBorderColor,\n      polygonFillColor,\n      colorsWasChanged,\n      setColorsWasChanged,\n      setPolygonBorderColor,\n      setPolygonFillColor,\n    }}>\n      {props.children}\n    </PolygonContext.Provider>\n  )\n}","import { useContext } from \"react\";\nimport { PolygonContext } from \"../contexts/PolygonContextProvider\";\n\nexport function usePolygonContext() {\n  const value = useContext(PolygonContext); \n  \n  return value;\n}","import { useCanvasContext } from '../../hooks/useCanvasContext';\nimport { usePolygonContext } from '../../hooks/usePolygonContext';\nimport './styles.css';\n\nexport function OptionsContainer() {\n  const {\n    polygonBorderColor,\n    polygonFillColor,\n    setPolygonBorderColor,\n    setPolygonFillColor,\n    setColorsWasChanged,\n  } = usePolygonContext();\n\n  const { setClearCanvas } = useCanvasContext();\n\n  return (\n    <section className=\"userOptions\">\n      <form>\n        <h3>Escolha as cores para o polígono</h3>\n        <div>\n          <label htmlFor=\"borderColor\"> Cor das bordas </label>\n          <input\n            type=\"color\"\n            id=\"borderColor\"\n            value={polygonBorderColor}\n            onChange={e => setPolygonBorderColor(e.target.value)}\n          />\n        </div>\n        <div>\n          <label htmlFor=\"polygonColor\">Cor de preenchimento</label>\n          <input\n            type=\"color\"\n            id=\"polygonColor\"\n            value={polygonFillColor}\n            onChange={e => setPolygonFillColor(e.target.value)}\n          />\n        </div>\n        <div className=\"buttonOptions\">\n          <button type=\"button\" onClick={() => setColorsWasChanged(true)}>Aplicar</button>\n          <button type=\"button\" onClick={() => setClearCanvas(true)}>Limpar</button>\n        </div>\n      </form>\n    </section>\n  )\n}","import Sketch from \"react-p5\";\nimport p5Types from \"p5\";\n\nimport { usePolygonContext } from \"../hooks/usePolygonContext\";\nimport { useCanvasContext } from \"../hooks/useCanvasContext\";\n\ninterface FillPolygonSketchType {\n  canvasParentRef: string;\n  canvasWidth: number;\n  canvasHeight: number;\n}\n\ninterface PointType {\n  x: number;\n  y: number;\n}\n\nexport default function FillPolygonSketch({\n  canvasParentRef,\n  canvasWidth,\n  canvasHeight,\n}: FillPolygonSketchType) {\n\n  const {\n    polygon,\n    polygonBorderColor,\n    polygonFillColor,\n    colorsWasChanged,\n    setColorsWasChanged,\n  } = usePolygonContext();\n\n  const {\n    clearCanvas,\n    rightButtonClicked,\n    setClearCanvas,\n    setRightButtonClicked,\n  } = useCanvasContext();\n\n  let canvas;\n\n  const closePolygon = (p5: p5Types) => {\n    const firstVertice = polygon.vertices[0];\n    const lastVertice = polygon.vertices[polygon.vertices.length - 1];\n    polygon.isOpen = false;\n\n    p5.line(firstVertice.x, firstVertice.y, lastVertice.x, lastVertice.y);\n\n    polygon.scanLine(firstVertice, lastVertice);\n    polygon.defineMaxsAndMins();\n    polygon.fillPolygon(p5);\n  };\n\n  const setVertice = (p5: p5Types, currentVertice: PointType) => {\n    const verticesLength = polygon.vertices.length;\n\n    polygon.vertices.push(currentVertice);\n\n    p5.stroke(polygon.borderColor);\n    p5.fill(polygon.borderColor);\n    p5.circle(currentVertice.x, currentVertice.y, 2); // Draw the vertice\n\n    // Verify if has more then 1 vertice to draw the edge\n    if (verticesLength) {\n      const lastVertice = polygon.vertices[verticesLength - 1];\n\n      polygon.scanLine(currentVertice, lastVertice); // Define all the X points in the edge to fill polygon after\n      p5.line(lastVertice.x, lastVertice.y, currentVertice.x, currentVertice.y);\n    }\n  };\n\n  const redirect = (p5: p5Types) => {\n    if (polygon.vertices.length > 2)\n      closePolygon(p5);\n    else alert(\"O Polígono deve ter no mínimo três lados!\");\n  }\n\n  // Verify if space or enter waas clicked to close polygon\n  const keyPressed = (p5: p5Types) => {\n    if ((p5.keyCode === 32 || p5.keyCode === 13) && polygon.isOpen)\n      redirect(p5);\n  };\n\n  const setup = (p5: p5Types) => {\n    canvas = p5.createCanvas(canvasWidth, canvasHeight).parent(canvasParentRef);\n    p5.strokeWeight(2.5);\n\n    // Capture all click in cavas to set the vertices\n    canvas.mouseClicked(() => {\n      if (polygon.isOpen) {\n        const x = Math.trunc(p5.mouseX);\n        const y = Math.trunc(p5.mouseY);\n\n        setVertice(p5, { x: x, y: y });\n      }\n    });\n  };\n\n  const draw = (p5: p5Types) => {\n    // Verify if flag to close polygon with right button has changed\n    if (rightButtonClicked) {\n      setRightButtonClicked(false);\n      if (polygon.isOpen)\n        redirect(p5);\n    }\n\n    // Verify if flag to change colors has changed\n    if (colorsWasChanged) {\n      setColorsWasChanged(false);\n      polygon.setColors(p5, polygonBorderColor, polygonFillColor);\n    }\n\n    // Verify all every time if clearCanvas is true (if button \"Limpar\" was pressed)\n    if (clearCanvas) {\n      p5.clear();\n      polygon.reset();\n\n      setClearCanvas(false);\n    }\n  };\n\n  return (\n    <Sketch\n      setup={setup}\n      draw={draw}\n      keyPressed={keyPressed}\n    />\n  );\n}\n\n","import { useCanvasContext } from \"../../hooks/useCanvasContext\";\nimport FillPolygonSketch from \"../../sketches/FillPolygonSketch\";\n\nimport \"./styles.css\";\n\nexport function Canvas() {\n  const { setRightButtonClicked } = useCanvasContext();\n  return (\n    <div\n      onContextMenu={(e) => {\n        e.preventDefault();\n        setRightButtonClicked(true);\n        return false;\n      }}\n      id=\"canvas\"\n    >\n      <FillPolygonSketch\n        canvasParentRef=\"canvas\"\n        canvasWidth={900}\n        canvasHeight={500}\n      />\n    </div>\n  );\n}\n\n","import './styles/home.css';\n\nimport { OptionsContainer } from './components/OptionsContainer';\nimport { Canvas } from './components/Canvas';\n\nimport { PolygonContextProvider } from './contexts/PolygonContextProvider';\nimport { CanvasContextProvider } from './contexts/CanvasContextProvider';\n\nfunction App() {\n  return (\n    <div className=\"HomeContainer\">\n      <h1>Preenchimento de Polígonos</h1>\n      <main className=\"main\">\n        <CanvasContextProvider>\n          <PolygonContextProvider>\n            <OptionsContainer />\n            <Canvas />\n          </PolygonContextProvider>\n        </CanvasContextProvider>\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}